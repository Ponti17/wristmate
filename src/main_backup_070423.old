#include <Arduino.h>
#include <Wire.h>
#include <WiFi.h>
#include <time.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP280.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SharpMem.h>
#include "SparkFun_BMA400_Arduino_Library.h"
#include <HTTPClient.h>
#include <Arduino_JSON.h>

// Define I2C pins
#define SDA 5
#define SCL 4

// Sharp Memory Display Initialization
#define SHARP_SCK  8
#define SHARP_MOSI 7
#define SHARP_SS   6

Adafruit_SharpMem display(SHARP_SCK, SHARP_MOSI, SHARP_SS, 240, 240);

#define BLACK 0
#define WHITE 1

int minorHalfSize;

// Initialize the BMP280 sensor
Adafruit_BMP280 bmp; 

// BMA400 Accelerometer setup
BMA400 accelerometer;
uint8_t i2cAddress = BMA400_I2C_ADDRESS_DEFAULT; 
int interruptPin = 2;
volatile bool interruptOccured = false;

// WiFi and time initialization
const char* ssid = "Politi_Lyttevogn";
const char* password = "kradsfarni";

const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 3600;
const int   daylightOffset_sec = 3600;

// Weather Initialization
String openWeatherApiKey = "bd491523d4252d78faacefbce30470d3";
String city = "Aarhus";
String countryCode = "DK";
String jsonBuffer;
String wifi_temp;

String httpGETRequest(const char* serverName) {
  WiFiClient client;
  HTTPClient http;
    
  // Your Domain name with URL path or IP address with path
  http.begin(client, serverName);
  
  // Send HTTP POST request
  int httpResponseCode = http.GET();
  
  String payload = "{}"; 
  
  if (httpResponseCode>0) {
    Serial.print("HTTP Response code: ");
    Serial.println(httpResponseCode);
    payload = http.getString();
  }
  else {
    Serial.print("Error code: ");
    Serial.println(httpResponseCode);
  }
  // Free resources
  http.end();

  return payload;
}

// Time keeping function. Don't touch.
String printLocalTime()
{
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("Failed to obtain time");
    return "00:00";
  }
  char timeHour[6];
  strftime(timeHour,6,"%H:%M",&timeinfo);
  return timeHour;
}

// Init display on startup
void initDisplay() {
  display.begin();
  display.clearDisplay();
  minorHalfSize = min(display.width(), display.height()) / 2;
  display.setRotation(2);
  display.setTextColor(BLACK, WHITE);
  display.setTextSize(2);
}

void setup() {
  // Initialization of display and WiFi
  Serial.begin(9600);
  initDisplay();
  WiFi.begin(ssid, password);

  // Loading screen while connecting on startup
  String dots = "  ";
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    if (dots == "  ") {
      dots = ". ";
    }
    else if (dots == ". ") {
      dots = "..";
    }
    else {
      dots = "  ";
    }
    display.setCursor(50,50);
    display.println("Connecting." + dots);
    display.refresh();
    Serial.println(dots);
  }

  String serverPath = "http://api.openweathermap.org/data/2.5/weather?q=" + city + "," + countryCode + "&APPID=" + openWeatherApiKey + "&units=metric";
  
  jsonBuffer = httpGETRequest(serverPath.c_str());
  JSONVar myObject = JSON.parse(jsonBuffer);

  if (JSON.typeof(myObject) == "undefined") {
  Serial.println("Parsing input failed!");
  }

  wifi_temp = JSON.stringify(myObject["main"]["temp"]); 

  // Get current time
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer); 
  printLocalTime();

  // Disconnect WiFi as no longer needed.
  WiFi.disconnect(true);
  WiFi.mode(WIFI_OFF);

  // I2C initialization
  Wire.begin(SDA, SCL); // SDA on GPIO5, SCL on GPIO4
  
  // BMP280 initalization
  if (!bmp.begin(0x76)) { // Initialize the BMP280 sensor at I2C address 0x76
    Serial.println("Could not find a valid BMP280 sensor, check wiring!");
    while (1);
  }

  // BMA400 initialization
  while(accelerometer.beginI2C(i2cAddress) != BMA400_OK) {
    Serial.println("BMA400 not connected!");
    delay(100);
  }

  bma400_step_int_conf config =
  {
      .int_chan = BMA400_INT_CHANNEL_1 // Which pin to use for interrupts
  };
  accelerometer.setStepCounterInterrupt(&config);

  accelerometer.setInterruptPinMode(BMA400_UNMAP_INT_PIN, BMA400_INT_PUSH_PULL_ACTIVE_1);

  accelerometer.enableInterrupt(BMA400_STEP_COUNTER_INT_EN, true);
}

// Variable initialization
String temp = "";
String pressure = "";

uint32_t time_since_scan = 0;
bool on_startup = true;

uint32_t stepCount = 0;
uint8_t activityType = 0;
String activityTypeString = "Unknown";

void loop() 
{
    // Read BMA400 every 10s
    if (millis() - time_since_scan > 10000) {
      time_since_scan = millis();
      accelerometer.getStepCount(&stepCount, &activityType);

      switch(activityType) {
        case BMA400_RUN_ACT:
          activityTypeString = "Running";
          break;
        case BMA400_WALK_ACT:
          activityTypeString = "Walking";
          break;
        case BMA400_STILL_ACT:
          activityTypeString = "Still  ";
          break;
        default:
          activityTypeString = "Unknown";
          break;
      }
    }

    // Read BMP280
    temp = String(bmp.readTemperature());
    pressure = String(bmp.readPressure() * 0.01); // Convert from pascal to hPa
    display.setTextSize(2);
    display.setCursor(50,30);
    display.println("Temp: " + temp);
    display.setCursor(50,50);
    display.println("Pres: " + pressure);

    // Print current time
    display.setCursor(20, 90);
    display.setTextSize(7);
    display.println(printLocalTime());

    // Print activity type
    display.setCursor(50, 150);
    display.setTextSize(2);
    display.println(wifi_temp);

    // Print temperature from OpenWeather
    display.setCursor(50, 170);
    display.setTextSize(2);
    display.println("Temp:" + activityTypeString);

    // Print step count
    display.setCursor(50, 190);
    display.setTextSize(2);
    display.println("Steps: " + String(stepCount));

    // Refresh display
    for(int j=0; j<2; j++) {
      display.refresh();
      delay(500);
  } 
}
